{"version":3,"sources":["Deck.js","data.js","App.js","index.js"],"names":["to","i","x","y","scale","rot","Math","random","delay","trans","r","s","Deck","data","useState","moved","setMoved","Set","gone","useSprings","length","from","props","set","bind","useGesture","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","handleDown","handleMove","map","div","style","transform","interpolate","onMouseDown","onMouseMove","onMouseUp","url","open","backgroundImage","imgUrl","PROMO_ID","id","getThumbUrl","App","setData","useEffect","init_data","fetch","then","res","json","item","link","push","className","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"4QAKMA,EAAK,SAAAC,GAAC,MAAK,CAAEC,EAAG,EAAGC,GAAQ,EAALF,EAAQG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAG9EQ,EAAQ,SAACC,EAAGC,GAAJ,2DAAwDD,EAAI,GAA5D,wBAA8EA,EAA9E,sBAA6FC,EAA7F,MA2CCC,EAxCF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAeF,oBAAS,kBAAM,IAAIG,OAA3BC,EAAP,oBACA,EAAqBC,YAAWN,EAAKO,QAAQ,SAAAnB,GAAC,kCAAUD,EAAGC,IAAb,IAAiBoB,KARhD,CAAEnB,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,UAQ/C,mBAAOmB,EAAP,KAAcC,EAAd,KAEMC,EAAOC,aAAW,YAAsF,IAA5EC,EAA2E,cAAlFC,KAAkF,MAAnEC,EAAmE,EAAnEA,KAAcC,EAAqD,cAA7DC,MAA6D,MAAtBC,GAAsB,EAA5CC,SAA4C,cAAlCC,UAAkC,OAAfC,EAAe,EAAfA,SAEtFC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELhB,EAAKkB,IAAIV,GAC/BH,GAAI,SAAAtB,GACF,GAAIyB,IAAUzB,EAAd,CACA,IAAMoC,EAASnB,EAAKoB,IAAIZ,GAIxB,MAAO,CAAExB,EAHCmC,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAGzDxB,IAFAwB,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAE1C9B,MADHwB,EAAO,IAAM,EACHpB,WAAOiC,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,UAEpGT,GAAQV,EAAK2B,OAAShC,EAAKO,QAAQ0B,YAAW,kBAAM5B,EAAK6B,SAAWxB,GAAI,SAAAtB,GAAC,OAAID,EAAGC,QAAK,QAGtF+C,EAAa,WACfhC,GAAS,IAEPiC,EAAa,WACfjC,GAAS,IAQb,OAAOM,EAAM4B,KAAI,WAAuBjD,GAAvB,IAAGC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAGE,EAAT,EAASA,IAAKD,EAAd,EAAcA,MAAd,OACf,cAAC,IAAS+C,IAAV,CAAsBC,MAAO,CAAEC,UAAWC,YAAY,CAACpD,EAAGC,IAAI,SAACD,EAAGC,GAAJ,4BAAyBD,EAAzB,cAAgCC,EAAhC,aAA6CoD,YAAaP,EAAYQ,YAAaP,EAAYQ,UAAW,kBAPxJC,EAOuK7C,EAAKZ,GAAGyD,SANzL3C,GACAwB,OAAOoB,KAAKD,EAAK,WAFR,IAACA,GAOhB,SAEE,cAAC,IAASP,IAAV,2BAAkB3B,EAAKvB,IAAvB,IAA2BmD,MAAO,CAAEC,UAAWC,YAAY,CAACjD,EAAKD,GAAQK,GAAQmD,gBAAgB,OAAD,OAAS/C,EAAKZ,GAAG4D,OAAjB,UAF/E5D,OC5CZ6D,EAAW,CACtB,CAACC,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WAEL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WAEL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WAEL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,WACL,CAACA,GAAI,YC7BDC,EAAc,SAACD,GACnB,MAAM,wEAAN,OAA+EA,EAA/E,SAOa,SAASE,IACtB,MAAwBnD,mBAAS,IAAjC,mBAAOD,EAAP,KAAaqD,EAAb,KAoBA,OAlBAC,oBAAS,gCAAC,kGACJC,EAAY,GADR,iCAEAnE,GAFA,2FAGAoE,OAVcN,EAUSD,EAAS7D,GAAG8D,GATvC,6DAAN,OAAoEA,EAApE,WASkDO,MAAK,SAAAC,GACjD,OAAOA,EAAIC,UACVF,MAAK,SAACzD,GACP,IAAM4D,EAAO,CACXf,IAAK7C,EAAK6D,KACVb,OAAQG,EAAYF,EAAS7D,GAAG8D,KAGlCK,EAAUO,KAAKF,MAXX,iCAPa,IAACV,IAOd,MAEA9D,EAAI,EAFJ,YAEOA,EAAI6D,EAAS1C,QAFpB,yCAEAnB,GAFA,eAE4BA,IAF5B,sBAcRiE,EAAQE,GAdA,2CAeP,IAID,sBAAKQ,UAAU,MAAf,UACE,qBAAKb,GAAG,eACR,qBAAKA,GAAG,aAAR,SACE,cAAC,EAAD,CAAMlD,KAAMA,SCjCpB,IAAMgE,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjB,EAAD,MAEFY,K","file":"static/js/main.921fc0e5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useSprings, animated, interpolate } from 'react-spring'\r\nimport { useGesture } from 'react-use-gesture'\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\n  \r\nconst Deck = ({data}) => {\r\n    const [moved, setMoved] = useState(false);\r\n    const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n    const [props, set] = useSprings(data.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\r\n    // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n    const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\r\n      const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\r\n      const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n      if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n      set(i => {\r\n        if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n        const isGone = gone.has(index)\r\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n        const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n        return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\r\n      })\r\n      if (!down && gone.size === data.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\r\n    })\r\n\r\n    const handleDown = () => {\r\n        setMoved(false);\r\n    }\r\n    const handleMove = () => {\r\n        setMoved(true);\r\n    }\r\n    const handleUp = (url) => {\r\n        if(!moved) {\r\n            window.open(url, '_blank');\r\n        }\r\n    }\r\n    // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n    return props.map(({ x, y, rot, scale }, i) => (\r\n      <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }} onMouseDown={handleDown} onMouseMove={handleMove} onMouseUp={() => handleUp(data[i].url)}>\r\n        {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n        <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${data[i].imgUrl})` }} />\r\n      </animated.div>\r\n    ))\r\n}\r\n\r\nexport default Deck","export const PROMO_ID = [    \r\n  {id: '0000792' }, \r\n  {id: '0000001' },  \r\n  {id: '0000793' }, \r\n  {id: '0000002' },  \r\n  {id: '0000794' },  \r\n  {id: '0001054' },  \r\n  {id: '0001376' }, \r\n  {id: '0001853' },  \r\n  {id: '0002990' },  \r\n  \r\n  {id: '0009800' }, \r\n  {id: '0009801' },  \r\n  {id: '0009802' }, \r\n  {id: '0009803' },  \r\n  {id: '0009804' },  \r\n  {id: '0009805' },  \r\n  {id: '0009806' }, \r\n  {id: '0009807' },  \r\n  {id: '0009808' }, \r\n  \r\n  {id: '0008779' },  \r\n  {id: '0008780' }, \r\n  {id: '0008781' }, \r\n  {id: '0008782' },  \r\n  {id: '0008783' },  \r\n  {id: '0008784' },  \r\n  {id: '0008785' },  \r\n  {id: '0008786' }, \r\n\r\n  {id: '0000003' }, \r\n  {id: '0000004' },  \r\n  {id: '0000005' }, \r\n  {id: '0000006' },  \r\n  {id: '0001377' }, \r\n]\r\n","import React, {useEffect, useState} from \"react\";\nimport \"./styles.css\";\nimport Deck from \"./Deck\";\nimport { PROMO_ID } from \"./data\";\n\nconst getThumbUrl = (id) => {\n  return `https://storage.googleapis.com/discoverilla-galaxy/thumbnail/128x128/${id}.jpg`\n}\n\nconst getVisionJsonURL = (id) => {\n  return `https://storage.googleapis.com/discoverilla-galaxy/vision/${id}.json`\n}\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  \n  useEffect(async () => {\n    let init_data = [];\n    for(let i = 0; i < PROMO_ID.length; i++) {\n      await fetch(getVisionJsonURL(PROMO_ID[i].id)).then(res => {\n        return res.json()\n      }).then((data) => { \n        const item = { \n          url: data.link,\n          imgUrl: getThumbUrl(PROMO_ID[i].id)\n        }\n\n        init_data.push(item);\n      })\n    }\n    setData(init_data)\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <div id=\"coverBlack\"></div>\n      <div id='chrono-div'>\n        <Deck data={data}/>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}